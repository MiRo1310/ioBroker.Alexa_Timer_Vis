{
  "version": 3,
  "sources": ["../../src/lib/timer-name.ts"],
  "sourcesContent": ["import { useStore } from \"../store/store\";\nimport { AlexaActiveTimerList } from \"../types\";\nimport { isIobrokerValue } from \"./global\";\nimport { timerObject, Timers, TimerSelector } from \"./timer-data\";\nimport { errorLogging } from \"./logging\";\n\nexport const getNewTimerName = (jsonString: ioBroker.State, timerSelector: string): void => {\n\tconst { _this } = useStore();\n\n\tlet json: AlexaActiveTimerList[] = [];\n\ttry {\n\t\tif (isIobrokerValue(jsonString)) {\n\t\t\tjson = JSON.parse(jsonString.val as string);\n\t\t}\n\n\t\tif (json.length === 1) {\n\t\t\tsaveLabelAndId(json[0], timerSelector);\n\t\t\treturn;\n\t\t}\n\n\t\tconst timerWithUniqueId = getTimerWithUniqueId(json);\n\t\tif (timerWithUniqueId) {\n\t\t\tsaveLabelAndId(timerWithUniqueId, timerSelector);\n\t\t}\n\t} catch (e: any) {\n\t\terrorLogging(\"Error in getNewTimerName\", e, _this);\n\t}\n};\n\nexport const registerIdToGetTimerName = async (timerSelector: TimerSelector): Promise<void> => {\n\tconst store = useStore();\n\tconst _this = store._this;\n\ttry {\n\t\tconst serial = store.deviceSerialNumber;\n\t\tif (!serial) {\n\t\t\treturn;\n\t\t}\n\t\tconst foreignId = `alexa2.${store.getAlexaInstanceObject().instance}.Echo-Devices.${serial}.Timer.activeTimerList`;\n\t\tstore.lastTimers.push({ timerSerial: serial, timerSelector: timerSelector as string, id: foreignId });\n\n\t\tawait _this.subscribeForeignStatesAsync(foreignId);\n\t} catch (e: any) {\n\t\terrorLogging(\"Error in registerIdToGetTimerName\", e, _this);\n\t}\n};\n\nfunction getTimerWithUniqueId(json: AlexaActiveTimerList[]): AlexaActiveTimerList | null {\n\tlet timerWithUniqueId: AlexaActiveTimerList | null = null;\n\tfor (let i = 0; i < json.length; i++) {\n\t\tif (timerWithUniqueId) {\n\t\t\tbreak;\n\t\t}\n\t\tfor (const timer in timerObject.timer) {\n\t\t\tif (timerObject.timer[timer as keyof Timers].id === json[i].id) {\n\t\t\t\ttimerWithUniqueId = null;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\ttimerWithUniqueId = { id: json[i].id, label: json[i].label || \"\", triggerTime: json[i].triggerTime };\n\t\t}\n\t}\n\treturn timerWithUniqueId;\n}\n\nfunction saveLabelAndId({ id, label }: AlexaActiveTimerList, timerSelector: string): void {\n\ttimerObject.timer[timerSelector as keyof typeof timerObject.timer].alexaTimerName = label || \"\";\n\ttimerObject.timer[timerSelector as keyof typeof timerObject.timer].id = id || \"\";\n}\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBAAyB;AAEzB,oBAAgC;AAChC,wBAAmD;AACnD,qBAA6B;AAEtB,MAAM,kBAAkB,CAAC,YAA4B,kBAAgC;AAC3F,QAAM,EAAE,MAAM,QAAI,uBAAS;AAE3B,MAAI,OAA+B,CAAC;AACpC,MAAI;AACH,YAAI,+BAAgB,UAAU,GAAG;AAChC,aAAO,KAAK,MAAM,WAAW,GAAa;AAAA,IAC3C;AAEA,QAAI,KAAK,WAAW,GAAG;AACtB,qBAAe,KAAK,CAAC,GAAG,aAAa;AACrC;AAAA,IACD;AAEA,UAAM,oBAAoB,qBAAqB,IAAI;AACnD,QAAI,mBAAmB;AACtB,qBAAe,mBAAmB,aAAa;AAAA,IAChD;AAAA,EACD,SAAS,GAAQ;AAChB,qCAAa,4BAA4B,GAAG,KAAK;AAAA,EAClD;AACD;AAEO,MAAM,2BAA2B,OAAO,kBAAgD;AAC9F,QAAM,YAAQ,uBAAS;AACvB,QAAM,QAAQ,MAAM;AACpB,MAAI;AACH,UAAM,SAAS,MAAM;AACrB,QAAI,CAAC,QAAQ;AACZ;AAAA,IACD;AACA,UAAM,YAAY,UAAU,MAAM,uBAAuB,EAAE,QAAQ,iBAAiB,MAAM;AAC1F,UAAM,WAAW,KAAK,EAAE,aAAa,QAAQ,eAAwC,IAAI,UAAU,CAAC;AAEpG,UAAM,MAAM,4BAA4B,SAAS;AAAA,EAClD,SAAS,GAAQ;AAChB,qCAAa,qCAAqC,GAAG,KAAK;AAAA,EAC3D;AACD;AAEA,SAAS,qBAAqB,MAA2D;AACxF,MAAI,oBAAiD;AACrD,WAAS,IAAI,GAAG,IAAI,KAAK,QAAQ,KAAK;AACrC,QAAI,mBAAmB;AACtB;AAAA,IACD;AACA,eAAW,SAAS,8BAAY,OAAO;AACtC,UAAI,8BAAY,MAAM,KAAqB,EAAE,OAAO,KAAK,CAAC,EAAE,IAAI;AAC/D,4BAAoB;AACpB;AAAA,MACD;AACA,0BAAoB,EAAE,IAAI,KAAK,CAAC,EAAE,IAAI,OAAO,KAAK,CAAC,EAAE,SAAS,IAAI,aAAa,KAAK,CAAC,EAAE,YAAY;AAAA,IACpG;AAAA,EACD;AACA,SAAO;AACR;AAEA,SAAS,eAAe,EAAE,IAAI,MAAM,GAAyB,eAA6B;AACzF,gCAAY,MAAM,aAA+C,EAAE,iBAAiB,SAAS;AAC7F,gCAAY,MAAM,aAA+C,EAAE,KAAK,MAAM;AAC/E;",
  "names": []
}
