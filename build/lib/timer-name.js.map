{
  "version": 3,
  "sources": ["../../src/lib/timer-name.ts"],
  "sourcesContent": ["import { useStore } from \"../store/store\";\nimport { isIobrokerValue } from \"./global\";\nimport { timerObject, TimerSelector } from \"./timer-data\";\nimport { AlexaActiveTimerList } from \"../types\";\n\nexport const getNewTimerName = (newJsonString: ioBroker.State, timerSelector: string): void => {\n\tconst { _this } = useStore();\n\tlet { oldAlexaTimerObject } = useStore();\n\n\tlet newJson: AlexaActiveTimerList[] = [];\n\ttry {\n\t\tif (isIobrokerValue(newJsonString)) {\n\t\t\tnewJson = JSON.parse(newJsonString.val as string);\n\t\t}\n\n\t\tfor (let i = 0; i < newJson.length; i++) {\n\t\t\tconst elementExist = oldAlexaTimerObject.find((oldElement: AlexaActiveTimerList) => {\n\t\t\t\tif (oldElement.id === newJson[i].id) {\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\t\t\t\treturn false;\n\t\t\t});\n\t\t\tif (!elementExist) {\n\t\t\t\ttimerObject.timer[timerSelector as keyof typeof timerObject.timer].nameFromAlexa = newJson[i].label;\n\t\t\t\ttimerObject.timer[timerSelector as keyof typeof timerObject.timer].id = newJson[i].id;\n\t\t\t\ttimerObject.timer[timerSelector as keyof typeof timerObject.timer].timeEndByAlexa =\n\t\t\t\t\tnewJson[i].triggerTime;\n\t\t\t}\n\t\t}\n\t\toldAlexaTimerObject = newJson;\n\t} catch (e: any) {\n\t\t_this.log.error(\"Error in checkForNewTimerInObject: \" + JSON.stringify(e));\n\t\t_this.log.error(e.stack);\n\t}\n};\n\nexport const registerIdToGetTimerName = async (timerSelector: TimerSelector): Promise<void> => {\n\tconst store = useStore();\n\tconst _this = store._this;\n\ttry {\n\t\tconst serial = store.deviceSerialNumber;\n\t\tif (!serial) {\n\t\t\treturn;\n\t\t}\n\t\tconst foreignId = `alexa2.${store.getAlexaInstanceObject().instance}.Echo-Devices.${serial}.Timer.activeTimerList`;\n\t\tstore.lastTimers.push({ timerSerial: serial, timerSelector: timerSelector as string, id: foreignId });\n\n\t\tawait _this.subscribeForeignStatesAsync(foreignId);\n\t} catch (e: any) {\n\t\t_this.log.error(\"Error in getName: \" + JSON.stringify(e));\n\t\t_this.log.error(e.stack);\n\t}\n};\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBAAyB;AACzB,oBAAgC;AAChC,wBAA2C;AAGpC,MAAM,kBAAkB,CAAC,eAA+B,kBAAgC;AAC9F,QAAM,EAAE,MAAM,QAAI,uBAAS;AAC3B,MAAI,EAAE,oBAAoB,QAAI,uBAAS;AAEvC,MAAI,UAAkC,CAAC;AACvC,MAAI;AACH,YAAI,+BAAgB,aAAa,GAAG;AACnC,gBAAU,KAAK,MAAM,cAAc,GAAa;AAAA,IACjD;AAEA,aAAS,IAAI,GAAG,IAAI,QAAQ,QAAQ,KAAK;AACxC,YAAM,eAAe,oBAAoB,KAAK,CAAC,eAAqC;AACnF,YAAI,WAAW,OAAO,QAAQ,CAAC,EAAE,IAAI;AACpC,iBAAO;AAAA,QACR;AACA,eAAO;AAAA,MACR,CAAC;AACD,UAAI,CAAC,cAAc;AAClB,sCAAY,MAAM,aAA+C,EAAE,gBAAgB,QAAQ,CAAC,EAAE;AAC9F,sCAAY,MAAM,aAA+C,EAAE,KAAK,QAAQ,CAAC,EAAE;AACnF,sCAAY,MAAM,aAA+C,EAAE,iBAClE,QAAQ,CAAC,EAAE;AAAA,MACb;AAAA,IACD;AACA,0BAAsB;AAAA,EACvB,SAAS,GAAQ;AAChB,UAAM,IAAI,MAAM,wCAAwC,KAAK,UAAU,CAAC,CAAC;AACzE,UAAM,IAAI,MAAM,EAAE,KAAK;AAAA,EACxB;AACD;AAEO,MAAM,2BAA2B,OAAO,kBAAgD;AAC9F,QAAM,YAAQ,uBAAS;AACvB,QAAM,QAAQ,MAAM;AACpB,MAAI;AACH,UAAM,SAAS,MAAM;AACrB,QAAI,CAAC,QAAQ;AACZ;AAAA,IACD;AACA,UAAM,YAAY,UAAU,MAAM,uBAAuB,EAAE,QAAQ,iBAAiB,MAAM;AAC1F,UAAM,WAAW,KAAK,EAAE,aAAa,QAAQ,eAAwC,IAAI,UAAU,CAAC;AAEpG,UAAM,MAAM,4BAA4B,SAAS;AAAA,EAClD,SAAS,GAAQ;AAChB,UAAM,IAAI,MAAM,uBAAuB,KAAK,UAAU,CAAC,CAAC;AACxD,UAAM,IAAI,MAAM,EAAE,KAAK;AAAA,EACxB;AACD;",
  "names": []
}
