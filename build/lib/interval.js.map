{
  "version": 3,
  "sources": ["../../src/lib/interval.ts"],
  "sourcesContent": ["import { generateValues } from \"./generate-values\";\nimport { secToHourMinSec } from \"./global\";\nimport { resetValues } from \"./reset\";\nimport { Timer, TimerSelector, timerObject } from \"./timer-data\";\nimport { useStore } from \"../store/store\";\n\nexport const interval = (\n\tsec: number,\n\ttimerBlock: TimerSelector,\n\tinputString: string,\n\tname: string,\n\ttimer: Timer,\n\tint: number,\n\tonlyOneTimer: boolean,\n): void => {\n\tconst store = useStore();\n\tconst _this = store._this;\n\n\tgenerateValues(timer, sec, timerBlock, inputString, name);\n\n\tconst { string } = secToHourMinSec(sec, false);\n\ttimer.lengthTimer = string;\n\n\tif (!timerBlock) {\n\t\treturn;\n\t}\n\n\ttimerObject.interval[timerBlock as keyof typeof timerObject.interval] = _this.setInterval(() => {\n\t\tconst timeLeftSec = generateValues(timer, sec, timerBlock, inputString, name);\n\n\t\tif (timeLeftSec <= 60 && onlyOneTimer == false) {\n\t\t\tonlyOneTimer = true;\n\n\t\t\tif (timerObject.interval) {\n\t\t\t\t_this.clearInterval(\n\t\t\t\t\ttimerObject.interval[timerBlock as keyof typeof timerObject.interval] as ioBroker.Interval,\n\t\t\t\t);\n\t\t\t}\n\n\t\t\tinterval(\n\t\t\t\tsec,\n\t\t\t\ttimerBlock,\n\t\t\t\tinputString,\n\t\t\t\tname,\n\t\t\t\ttimer,\n\t\t\t\ttimerObject.timer[timerBlock as keyof typeof timerObject.timer].timerInterval,\n\t\t\t\ttrue,\n\t\t\t);\n\t\t}\n\n\t\tif (timeLeftSec <= 0 || timerObject.timerActive.timer[timerBlock as keyof typeof timerObject.timer] == false) {\n\t\t\ttimerObject.timerActive.timerCount--;\n\n\t\t\tresetValues(timer, timerBlock);\n\n\t\t\t_this.log.debug(\"Timer stopped\");\n\n\t\t\tif (timerObject.interval) {\n\t\t\t\t_this.clearInterval(\n\t\t\t\t\ttimerObject.interval[timerBlock as keyof typeof timerObject.interval] as ioBroker.Interval,\n\t\t\t\t);\n\n\t\t\t\ttimerObject.interval[timerBlock as keyof typeof timerObject.interval] = null;\n\t\t\t}\n\t\t}\n\t}, int);\n};\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,6BAA+B;AAC/B,oBAAgC;AAChC,mBAA4B;AAC5B,wBAAkD;AAClD,mBAAyB;AAElB,MAAM,WAAW,CACvB,KACA,YACA,aACA,MACA,OACA,KACA,iBACU;AACV,QAAM,YAAQ,uBAAS;AACvB,QAAM,QAAQ,MAAM;AAEpB,6CAAe,OAAO,KAAK,YAAY,aAAa,IAAI;AAExD,QAAM,EAAE,OAAO,QAAI,+BAAgB,KAAK,KAAK;AAC7C,QAAM,cAAc;AAEpB,MAAI,CAAC,YAAY;AAChB;AAAA,EACD;AAEA,gCAAY,SAAS,UAA+C,IAAI,MAAM,YAAY,MAAM;AAC/F,UAAM,kBAAc,uCAAe,OAAO,KAAK,YAAY,aAAa,IAAI;AAE5E,QAAI,eAAe,MAAM,gBAAgB,OAAO;AAC/C,qBAAe;AAEf,UAAI,8BAAY,UAAU;AACzB,cAAM;AAAA,UACL,8BAAY,SAAS,UAA+C;AAAA,QACrE;AAAA,MACD;AAEA;AAAA,QACC;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,QACA,8BAAY,MAAM,UAA4C,EAAE;AAAA,QAChE;AAAA,MACD;AAAA,IACD;AAEA,QAAI,eAAe,KAAK,8BAAY,YAAY,MAAM,UAA4C,KAAK,OAAO;AAC7G,oCAAY,YAAY;AAExB,oCAAY,OAAO,UAAU;AAE7B,YAAM,IAAI,MAAM,eAAe;AAE/B,UAAI,8BAAY,UAAU;AACzB,cAAM;AAAA,UACL,8BAAY,SAAS,UAA+C;AAAA,QACrE;AAEA,sCAAY,SAAS,UAA+C,IAAI;AAAA,MACzE;AAAA,IACD;AAAA,EACD,GAAG,GAAG;AACP;",
  "names": []
}
