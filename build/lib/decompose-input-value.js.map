{
  "version": 3,
  "sources": ["../../src/lib/decompose-input-value.ts"],
  "sourcesContent": ["import { useStore } from \"../store/store\";\r\nimport { filterInfo } from \"./filter-info\";\r\nexport const decomposeInputValue = async (\r\n\tinputString: string,\r\n): Promise<{ name: string; timerSec: number; deleteVal: number; inputString: string }> => {\r\n\tconst store = useStore();\r\n\tconst _this = store._this;\r\n\r\n\ttry {\r\n\t\tlet inputDecomposed = inputString.split(\",\");\r\n\t\tinputDecomposed = inputDecomposed[0].split(\" \");\r\n\r\n\t\tconst returnArray = await filterInfo(inputDecomposed);\r\n\r\n\t\tlet name = \"\";\r\n\t\tif (returnArray[1]) {\r\n\t\t\tname = returnArray[1];\r\n\t\t}\r\n\r\n\t\tlet timerSec = 0;\r\n\t\tif (returnArray[0]) {\r\n\t\t\ttimerSec = eval(returnArray[0]);\r\n\t\t}\r\n\r\n\t\treturn { name, timerSec, deleteVal: returnArray[2], inputString: returnArray[3] };\r\n\t} catch (e: any) {\r\n\t\t_this.log.error(\"Error: \" + JSON.stringify(e));\r\n\t\treturn { name: \"\", timerSec: 0, deleteVal: 0, inputString: \"\" };\r\n\t}\r\n};\r\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBAAyB;AACzB,yBAA2B;AACpB,MAAM,sBAAsB,OAClC,gBACyF;AACzF,QAAM,YAAQ,uBAAS;AACvB,QAAM,QAAQ,MAAM;AAEpB,MAAI;AACH,QAAI,kBAAkB,YAAY,MAAM,GAAG;AAC3C,sBAAkB,gBAAgB,CAAC,EAAE,MAAM,GAAG;AAE9C,UAAM,cAAc,UAAM,+BAAW,eAAe;AAEpD,QAAI,OAAO;AACX,QAAI,YAAY,CAAC,GAAG;AACnB,aAAO,YAAY,CAAC;AAAA,IACrB;AAEA,QAAI,WAAW;AACf,QAAI,YAAY,CAAC,GAAG;AACnB,iBAAW,KAAK,YAAY,CAAC,CAAC;AAAA,IAC/B;AAEA,WAAO,EAAE,MAAM,UAAU,WAAW,YAAY,CAAC,GAAG,aAAa,YAAY,CAAC,EAAE;AAAA,EACjF,SAAS,GAAQ;AAChB,UAAM,IAAI,MAAM,YAAY,KAAK,UAAU,CAAC,CAAC;AAC7C,WAAO,EAAE,MAAM,IAAI,UAAU,GAAG,WAAW,GAAG,aAAa,GAAG;AAAA,EAC/D;AACD;",
  "names": []
}
