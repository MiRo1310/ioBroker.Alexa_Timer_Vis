{
  "version": 3,
  "sources": ["../../src/lib/decompose-input-value.ts"],
  "sourcesContent": ["import { useStore } from \"../store/store\";\nimport { filterInfo } from \"./filter-info\";\nimport { errorLogging } from \"./logging\";\nexport const decomposeInputValue = async (\n\tvoiceString: string,\n): Promise<{ name: string; timerSec: number; deleteVal: number; inputString: string }> => {\n\tconst store = useStore();\n\tconst _this = store._this;\n\tlet stringToEval: string = \"\";\n\ttry {\n\t\tlet inputDecomposed = voiceString.split(\",\");\n\t\tinputDecomposed = inputDecomposed[0].split(\" \");\n\n\t\tconst { timerString, name, deleteVal, inputString } = await filterInfo(inputDecomposed);\n\t\tstringToEval = timerString;\n\t\treturn { name, timerSec: eval(timerString), deleteVal, inputString };\n\t} catch (e: any) {\n\t\terrorLogging({\n\t\t\ttext: \"Error in decomposeInputValue: \",\n\t\t\terror: e,\n\t\t\t_this,\n\t\t\tvalue: \"Input: \" + voiceString + \" TimerString: \" + stringToEval,\n\t\t});\n\t\treturn { name: \"\", timerSec: 0, deleteVal: 0, inputString: \"\" };\n\t}\n};\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBAAyB;AACzB,yBAA2B;AAC3B,qBAA6B;AACtB,MAAM,sBAAsB,OAClC,gBACyF;AACzF,QAAM,YAAQ,uBAAS;AACvB,QAAM,QAAQ,MAAM;AACpB,MAAI,eAAuB;AAC3B,MAAI;AACH,QAAI,kBAAkB,YAAY,MAAM,GAAG;AAC3C,sBAAkB,gBAAgB,CAAC,EAAE,MAAM,GAAG;AAE9C,UAAM,EAAE,aAAa,MAAM,WAAW,YAAY,IAAI,UAAM,+BAAW,eAAe;AACtF,mBAAe;AACf,WAAO,EAAE,MAAM,UAAU,KAAK,WAAW,GAAG,WAAW,YAAY;AAAA,EACpE,SAAS,GAAQ;AAChB,qCAAa;AAAA,MACZ,MAAM;AAAA,MACN,OAAO;AAAA,MACP;AAAA,MACA,OAAO,YAAY,cAAc,mBAAmB;AAAA,IACrD,CAAC;AACD,WAAO,EAAE,MAAM,IAAI,UAAU,GAAG,WAAW,GAAG,aAAa,GAAG;AAAA,EAC/D;AACD;",
  "names": []
}
