{
  "version": 3,
  "sources": ["../../src/lib/timer-extend-or-shorten.ts"],
  "sourcesContent": ["import type { Store } from '../store/store';\n// eslint-disable-next-line no-duplicate-imports\nimport { useStore } from '../store/store';\nimport { filterInfo } from './filter-info';\nimport { findTimer } from './find-timer';\nimport { timerObject } from './timer-data';\nimport { timeToString } from './global';\n// eslint-disable-next-line no-duplicate-imports\nimport type { TimerObject, Timers } from './timer-data';\nimport { errorLogging } from './logging';\n\nexport const extendOrShortTimer = async ({\n    voiceInput,\n    decomposeName,\n}: {\n    voiceInput: string;\n    decomposeName: string;\n}): Promise<void> => {\n    const store = useStore();\n    const _this = store._this;\n    try {\n        const addOrSub = getMultiplikatorForAddOrSub(store);\n\n        let firstPartOfValue, valueExtend;\n        let extendTime = 0;\n        let extendTime2 = 0;\n\n        if (voiceInput.includes('um')) {\n            firstPartOfValue = voiceInput.slice(0, voiceInput.indexOf('um')).split(' ');\n            valueExtend = voiceInput.slice(voiceInput.indexOf('um') + 2).split(' ');\n\n            const { timerString } = filterInfo(firstPartOfValue);\n            extendTime = eval(timerString);\n            const { timerString: string2 } = filterInfo(valueExtend);\n            extendTime2 = eval(string2);\n        }\n\n        const timers = await findTimer(extendTime, decomposeName, 1, voiceInput);\n\n        if (timers.timer) {\n            extendTimer(timers.timer, extendTime2, addOrSub, timerObject);\n            return;\n        }\n        if (timers.oneOfMultiTimer) {\n            extendTimer(timers.oneOfMultiTimer, extendTime2, addOrSub, timerObject);\n        }\n    } catch (e: any) {\n        errorLogging({ text: 'Error in extendOrShortTimer', error: e, _this });\n    }\n};\n\nfunction getMultiplikatorForAddOrSub(store: Store): 1 | -1 {\n    if (store.isShortenTimer()) {\n        return -1;\n    }\n    return 1;\n}\n\nexport function extendTimer(timers: string[], sec: number, addOrSub: number, timerObject: TimerObject): void {\n    timers.forEach((timer: string) => {\n        const timerSeconds = sec;\n\n        if (timerObject.timerActive.timer[timer as keyof Timers]) {\n            timerObject.timer[timer as keyof Timers].extendOrShortenTimer = true;\n\n            timerObject.timer[timer as keyof Timers].endTimeNumber += timerSeconds * 1000 * addOrSub;\n\n            timerObject.timer[timer as keyof Timers].endTimeString = timeToString(\n                timerObject.timer[timer as keyof Timers].endTimeNumber,\n            );\n            timerObject.timer[timer as keyof Timers].voiceInputAsSeconds += timerSeconds * addOrSub;\n        }\n    });\n}\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA,mBAAyB;AACzB,yBAA2B;AAC3B,wBAA0B;AAC1B,wBAA4B;AAC5B,oBAA6B;AAG7B,qBAA6B;AAEtB,MAAM,qBAAqB,OAAO;AAAA,EACrC;AAAA,EACA;AACJ,MAGqB;AACjB,QAAM,YAAQ,uBAAS;AACvB,QAAM,QAAQ,MAAM;AACpB,MAAI;AACA,UAAM,WAAW,4BAA4B,KAAK;AAElD,QAAI,kBAAkB;AACtB,QAAI,aAAa;AACjB,QAAI,cAAc;AAElB,QAAI,WAAW,SAAS,IAAI,GAAG;AAC3B,yBAAmB,WAAW,MAAM,GAAG,WAAW,QAAQ,IAAI,CAAC,EAAE,MAAM,GAAG;AAC1E,oBAAc,WAAW,MAAM,WAAW,QAAQ,IAAI,IAAI,CAAC,EAAE,MAAM,GAAG;AAEtE,YAAM,EAAE,YAAY,QAAI,+BAAW,gBAAgB;AACnD,mBAAa,KAAK,WAAW;AAC7B,YAAM,EAAE,aAAa,QAAQ,QAAI,+BAAW,WAAW;AACvD,oBAAc,KAAK,OAAO;AAAA,IAC9B;AAEA,UAAM,SAAS,UAAM,6BAAU,YAAY,eAAe,GAAG,UAAU;AAEvE,QAAI,OAAO,OAAO;AACd,kBAAY,OAAO,OAAO,aAAa,UAAU,6BAAW;AAC5D;AAAA,IACJ;AACA,QAAI,OAAO,iBAAiB;AACxB,kBAAY,OAAO,iBAAiB,aAAa,UAAU,6BAAW;AAAA,IAC1E;AAAA,EACJ,SAAS,GAAQ;AACb,qCAAa,EAAE,MAAM,+BAA+B,OAAO,GAAG,MAAM,CAAC;AAAA,EACzE;AACJ;AAEA,SAAS,4BAA4BA,QAAsB;AACvD,MAAIA,OAAM,eAAe,GAAG;AACxB,WAAO;AAAA,EACX;AACA,SAAO;AACX;AAEO,SAAS,YAAYC,SAAkB,KAAaC,WAAkBC,cAAgC;AACzG,EAAAF,QAAO,QAAQ,CAAC,UAAkB;AAC9B,UAAM,eAAe;AAErB,QAAIE,aAAY,YAAY,MAAM,KAAqB,GAAG;AACtD,MAAAA,aAAY,MAAM,KAAqB,EAAE,uBAAuB;AAEhE,MAAAA,aAAY,MAAM,KAAqB,EAAE,iBAAiB,eAAe,MAAOD;AAEhF,MAAAC,aAAY,MAAM,KAAqB,EAAE,oBAAgB;AAAA,QACrDA,aAAY,MAAM,KAAqB,EAAE;AAAA,MAC7C;AACA,MAAAA,aAAY,MAAM,KAAqB,EAAE,uBAAuB,eAAeD;AAAA,IACnF;AAAA,EACJ,CAAC;AACL;",
  "names": ["store", "timers", "addOrSub", "timerObject"]
}
