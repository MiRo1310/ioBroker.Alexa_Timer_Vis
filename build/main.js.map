{
  "version": 3,
  "sources": ["../src/main.ts"],
  "sourcesContent": ["\"use strict\";\nimport * as utils from \"@iobroker/adapter-core\";\nimport { decomposeInputValue } from \"./lib/decompose-input-value\";\nimport { delTimer, removeTimerInLastTimers as resetLastTimer } from \"./lib/delete-timer\";\nimport {\n\tdoesAlexaSendAQuestion,\n\tisAlexaSummaryStateChanged as isAlexaStateToListenToChanged,\n\tisIobrokerValue,\n} from \"./lib/global\";\nimport { errorLogging } from \"./lib/logging\";\nimport { resetAllTimerValuesAndState } from \"./lib/reset\";\nimport { setAdapterStatusAndInitStateCreation } from \"./lib/set-adapter-status\";\nimport { timerAdd } from \"./lib/timer-add\";\nimport { Timer, TimerCondition, timerObject, Timers } from \"./lib/timer-data\";\nimport { timerDelete } from \"./lib/timer-delete\";\nimport { extendOrShortTimer } from \"./lib/timer-extend-or-shorten\";\nimport { getNewTimerName } from \"./lib/timer-name\";\nimport { writeState } from \"./lib/write-state\";\nimport { Store, useStore } from \"./store/store\";\n\nlet timeout_1: ioBroker.Timeout | undefined;\nlet debounceTimeout: ioBroker.Timeout | undefined;\n\nexport default class AlexaTimerVis extends utils.Adapter {\n\tprivate static instance: AlexaTimerVis;\n\t/**\n\t * @param {Partial<utils.AdapterOptions>} [options={}]\n\t */\n\tpublic constructor(options: Partial<utils.AdapterOptions> = {}) {\n\t\tsuper({\n\t\t\t...options,\n\t\t\tname: \"alexa-timer-vis\",\n\t\t});\n\t\tthis.on(\"ready\", this.onReady.bind(this));\n\t\tthis.on(\"unload\", this.onUnload.bind(this));\n\t\tAlexaTimerVis.instance = this;\n\t}\n\tpublic static getInstance(): AlexaTimerVis {\n\t\treturn AlexaTimerVis.instance;\n\t}\n\n\tprivate async onReady(): Promise<void> {\n\t\tconst store = useStore();\n\t\tstore._this = this;\n\n\t\tthis.setState(\"info.connection\", false, true);\n\t\tif (this.adapterConfig && \"_id\" in this.adapterConfig) {\n\t\t\tstore.alexaTimerVisInstance = this.adapterConfig?._id.replace(\"system.adapter.\", \"\");\n\t\t}\n\n\t\tstore.pathAlexaStateToListenTo = `${this.config.alexa}.History.intent`;\n\t\tstore.pathAlexaSummary = `${this.config.alexa}.History.summary`;\n\n\t\tstore.intervalMore60 = this.config.intervall1;\n\t\tstore.intervalLess60 = this.config.intervall2;\n\n\t\tstore.unitHour1 = this.config.unitHour1;\n\t\tstore.unitHour2 = this.config.unitHour2;\n\t\tstore.unitHour3 = this.config.unitHour3;\n\t\tstore.unitMinute1 = this.config.unitMinute1;\n\t\tstore.unitMinute2 = this.config.unitMinute2;\n\t\tstore.unitMinute3 = this.config.unitMinute3;\n\t\tstore.unitSecond1 = this.config.unitSecond1;\n\t\tstore.unitSecond3 = this.config.unitSecond3;\n\t\tstore.unitSecond2 = this.config.unitSecond2;\n\n\t\tstore.valHourForZero = this.config.valHourForZero;\n\t\tstore.valMinuteForZero = this.config.valMinuteForZero;\n\t\tstore.valSecondForZero = this.config.valSecondForZero;\n\n\t\tstore.debounceTime = this.config.entprellZeit;\n\n\t\tawait setAdapterStatusAndInitStateCreation();\n\t\tresetAllTimerValuesAndState(this);\n\n\t\tlet voiceInput: string;\n\n\t\tthis.on(\"stateChange\", async (id, state) => {\n\t\t\ttry {\n\t\t\t\tcheckForTimerName(this, id);\n\t\t\t\tif (isAlexaStateToListenToChanged(state, id) && isTimerAction(state)) {\n\t\t\t\t\tthis.log.debug(\"Alexa state changed\");\n\t\t\t\t\tlet doNothingByNotNotedElement = false; // Bestimmte Aufrufe d\u00FCrfen keine Aktion ausf\u00FChren, wenn mehrere Ger\u00E4te zuh\u00F6ren. #12 und #14 .\n\t\t\t\t\tif (isIobrokerValue(state)) {\n\t\t\t\t\t\tstore.timerAction = state.val as TimerCondition;\n\t\t\t\t\t}\n\t\t\t\t\tconst res = await this.getForeignStateAsync(store.pathAlexaSummary);\n\t\t\t\t\tif (isIobrokerValue(res)) {\n\t\t\t\t\t\tvoiceInput = res?.val as string;\n\t\t\t\t\t\tthis.log.debug(\"VoiceInput: \" + voiceInput);\n\t\t\t\t\t}\n\t\t\t\t\tif (timerObject.timerActive.data.abortWords.find((word) => voiceInput.includes(word))) {\n\t\t\t\t\t\tthis.log.debug(\"AbortWord found\");\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\t\t\t\tif (timerObject.timerActive.data.notNotedSentence.find((el) => el === voiceInput)) {\n\t\t\t\t\t\tthis.log.debug(\"NotNotedSentence found\");\n\t\t\t\t\t\tdoNothingByNotNotedElement = true;\n\t\t\t\t\t}\n\n\t\t\t\t\tconst {\n\t\t\t\t\t\tname: decomposeName,\n\t\t\t\t\t\ttimerSec,\n\t\t\t\t\t\tdeleteVal,\n\t\t\t\t\t\tinputString: decomposeInputString,\n\t\t\t\t\t} = await decomposeInputValue(voiceInput);\n\n\t\t\t\t\tif (!doNothingByNotNotedElement || store.isDeleteTimer()) {\n\t\t\t\t\t\tdoesAlexaSendAQuestion(voiceInput);\n\n\t\t\t\t\t\tif (store.isDeleteTimer()) {\n\t\t\t\t\t\t\ttimerDelete(decomposeName, timerSec, voiceInput, deleteVal);\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif (store.isAddTimer()) {\n\t\t\t\t\t\t\ttimerAdd(decomposeName, timerSec, decomposeInputString);\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif (store.isExtendTimer() || store.isShortenTimer()) {\n\t\t\t\t\t\t\textendOrShortTimer({ voiceInput, decomposeName });\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\tif (isAlexaTimerVisResetButton(state, id)) {\n\t\t\t\t\tconst timer = id.split(\".\")[2] as keyof Timers;\n\t\t\t\t\tconst timerObj = timerObject.timer[timer];\n\n\t\t\t\t\tthis.setForeignState(\n\t\t\t\t\t\tgetAlexaTextToCommandState(store, timerObj),\n\t\t\t\t\t\tbuildTextCommand(timerObj),\n\t\t\t\t\t\tfalse,\n\t\t\t\t\t);\n\t\t\t\t\tdelTimer(timer);\n\t\t\t\t}\n\n\t\t\t\tfunction checkForTimerName(_this: AlexaTimerVis, id: string): void {\n\t\t\t\t\tif (!isIobrokerValue(state) || state.val === \"[]\") {\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\t\t\t\tconst lastTimer = store.lastTimer;\n\t\t\t\t\tif (lastTimer.id === id) {\n\t\t\t\t\t\tresetLastTimer();\n\n\t\t\t\t\t\tgetNewTimerName(state, lastTimer.timerSelector);\n\t\t\t\t\t\t_this.unsubscribeForeignStatesAsync(id);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} catch (e) {\n\t\t\t\terrorLogging({ text: \"Error in stateChange\", error: e, _this: this });\n\t\t\t}\n\t\t});\n\n\t\tthis.subscribeForeignStates(store.pathAlexaStateToListenTo);\n\t}\n\n\tonUnload(callback: () => void): void {\n\t\tconst store = useStore();\n\t\ttry {\n\t\t\tthis.log.info(\"Adapter shuts down\");\n\n\t\t\twriteState({ reset: true });\n\n\t\t\tthis.clearTimeout(timeout_1);\n\t\t\tthis.clearTimeout(debounceTimeout);\n\n\t\t\tthis.clearInterval(store.interval);\n\n\t\t\tif (!timerObject.interval) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tfor (const element in timerObject.interval) {\n\t\t\t\tthis.clearInterval(timerObject.interval[element as keyof typeof timerObject.interval]);\n\t\t\t}\n\n\t\t\tthis.log.debug(\"Intervals and timeouts cleared!\");\n\n\t\t\tcallback();\n\t\t} catch (e) {\n\t\t\terrorLogging({ text: \"Error in onUnload\", error: e, _this: this });\n\t\t\tcallback();\n\t\t}\n\t}\n}\n\nlet adapter;\nif (require.main !== module) {\n\t// Export the constructor in compact mode\n\tadapter = (options: Partial<utils.AdapterOptions> | undefined) => new AlexaTimerVis(options);\n} else {\n\t// otherwise start the instance directly\n\t(() => new AlexaTimerVis())();\n}\nexport { adapter };\n\nfunction getAlexaTextToCommandState(store: Store, timerObj: Timer): string {\n\treturn `alexa2.${store.getAlexaInstanceObject().instance}.Echo-Devices.${timerObj.serialNumber}.Commands.textCommand`;\n}\n\nfunction isAlexaTimerVisResetButton(state: ioBroker.State | null | undefined, id: string): boolean {\n\treturn isIobrokerValue(state) && state.val && id.includes(\"Reset\") ? true : false;\n}\n\nfunction buildTextCommand(timerOb: Timer): ioBroker.State | ioBroker.StateValue | ioBroker.SettableState {\n\treturn `stoppe ${timerOb.alexaTimerName && timerOb.alexaTimerName !== \"\" ? timerOb.alexaTimerName : timerOb.name !== \"Timer\" ? timerOb.name.replace(\"Timer\", \"\") : timerOb.inputString} Timer`;\n}\n\nfunction isTimerAction(state: ioBroker.State | null | undefined): boolean {\n\tif (!state?.val) {\n\t\treturn false;\n\t}\n\treturn [\n\t\t\"SetNotificationIntent\",\n\t\t\"ShortenNotificationIntent\",\n\t\t\"ExtendNotificationIntent\",\n\t\t\"RemoveNotificationIntent\",\n\t].includes(state.val as string);\n}\n"],
  "mappings": "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",
  "names": ["id", "resetLastTimer", "isAlexaStateToListenToChanged"]
}
